<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_legs_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_legs_walk</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hud = instance_create(0, 0, obj_hud);
hud.owner = id;
instance_create(0, 0, obj_spawner);

//movement vars
left = false;
right = false;
up = false;
down = false;
xmov = 0;
ymov = 0;
spd = 1.2;

//animation vars
image_speed = 0;
image_index = 0;
image_index_armL = 0;
image_angle_legs = 0;
image_angle_body = 0;
image_timecap = room_speed / 8;
image_time = image_timecap;
sprite_index_armL = spr_armL_still;

//shooting vars
ammocap = 40;
ammo = ammocap;
shoottimecap = room_speed / 5;
shoottime = shoottimecap;

//reloading
reloadtimecap = room_speed;
reloadtime = reloadtimecap;

//status vars
alive = true;
hp = 100;
invincibletimecap = room_speed / 2;
invincibletime = invincibletimecap;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (xmov == 0)
    x = round(x);
else
{
    if (!place_meeting(x + xmov, y, obj_block))
        x += xmov;
    else
    {
        x = round(x);
        var side = 1;
        if (xmov &lt; 0)
            side = -1;
        while (!place_meeting(x + side, y, obj_block))
            x += side;
        xmov = 0;
    }
}

if (ymov == 0)
    y = round(y);
else
{
    if (!place_meeting(x, y + ymov, obj_block))
        y += ymov;
    else
    {
        y = round(y);
        var side = 1;
        if (ymov &lt; 0)
            side = -1;
        while (!place_meeting(x, y + side, obj_block))
            y += side;
        ymov = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alive)
{
    left = keyboard_check(ord("A"));
    right = keyboard_check(ord("D"));
    up = keyboard_check(ord("W"));
    down = keyboard_check(ord("S"));
    if (left &amp;&amp; right)
    {
        left = false;
        right = false;
    }
    if (up &amp;&amp; down)
    {
        up = false;
        down = false;
    }
    if (left)
        xmov = -spd;
    else if (right)
            xmov = spd;
        else xmov = 0;
    if (up)
        ymov = -spd;
    else if (down)
            ymov = spd;
        else ymov = 0;
        
    if (shoottime &lt; shoottimecap)
    {
        shoottime--;
        if (shoottime &lt;= 0)
            shoottime = shoottimecap;
    }
    if (mouse_check_button(mb_left) &amp;&amp; ammo &gt; 0 &amp;&amp; reloadtime == reloadtimecap &amp;&amp; shoottime == shoottimecap)
    {
        var bullet = instance_create(x + lengthdir_x(5, image_angle_body - 90) + lengthdir_x(12, image_angle_body), y + lengthdir_y(5, image_angle_body - 90) + lengthdir_y(12, image_angle_body), obj_bullet);
        bullet.image_angle = image_angle_body + irandom_range(-5, 5);
        shoottime--;
        ammo--;
    }
    
    if (reloadtime &lt; reloadtimecap)
    {
        reloadtime--;
        if (reloadtime &lt;= 0)
        {
            reloadtime = reloadtimecap;
            ammo = ammocap;
        }
    }
    if (keyboard_check_pressed(ord("R")) &amp;&amp; reloadtime == reloadtimecap &amp;&amp; ammo != ammocap)
        reloadtime--;
        
    if (invincibletime &lt; invincibletimecap)
    {
        invincibletime--;
        if (invincibletime &lt;= 0)
            invincibletime = invincibletimecap;
    }
    else if (place_meeting(x, y, obj_zombie))
        {
            var zombie = instance_place(x, y, obj_zombie);
            hp -= zombie.hp;
            invincibletime--;
        }
        
    if (hp &lt; 0)
    {
        alive = false;
        hp = 0;
    }
        
    player_animate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alive)
{
    draw_sprite_ext(sprite_index, image_index, round(x), round(y), 1, 1, image_angle_legs, c_white, 1);
    draw_sprite_ext(spr_body, 0, round(x), round(y), 1, 1, image_angle_body, c_white, 1);
    draw_sprite_ext(sprite_index_armL, image_index_armL, round(x), round(y), 1, 1, image_angle_body, c_white, 1);
    draw_sprite_ext(spr_armR_still, 0, round(x), round(y), 1, 1, image_angle_body, c_white, 1);
    draw_sprite_ext(spr_gun, 0, round(x), round(y), 1, 1, image_angle_body, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
